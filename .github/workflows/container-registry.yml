name: Build and Push Container Images to GHCR

on:
  push:
    branches: [main, develop]
    paths:
      - 'infra/**'
      - 'src/**'
      - 'Dockerfile*'
      - '.github/workflows/container-registry.yml'
  pull_request:
    branches: [main]
    paths:
      - 'infra/**'
      - 'src/**'
      - 'Dockerfile*'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even without changes'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_MCP: ${{ toLower(github.repository) }}/mcp-server
  IMAGE_NAME_WEB: ${{ toLower(github.repository) }}/web-interface

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    permissions:
      contents: write  # Need write permission to create tags
      packages: write

    outputs:
      version-tag: ${{ steps.version.outputs.version-tag }}
      pr-tag: ${{ steps.version.outputs.pr-tag }}

    strategy:
      matrix:
        include:
          - name: mcp-server
            dockerfile: infra/Dockerfile.mcp
            context: .
            image_env: IMAGE_NAME_MCP
          - name: web-interface
            dockerfile: infra/Dockerfile.web
            context: .
            image_env: IMAGE_NAME_WEB

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version tag
        id: version
        run: |
          # Generate date-based version: YYYY.MM.DD.quantity
          DATE=$(date +%Y.%m.%d)

          # Get existing tags for today to determine quantity
          EXISTING_TAGS=$(git tag -l "${DATE}.*" | wc -l)
          QUANTITY=$((EXISTING_TAGS + 1))

          VERSION="${DATE}.${QUANTITY}"

          # Set outputs for different scenarios
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version-tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "date=${DATE}" >> $GITHUB_OUTPUT
          echo "quantity=${QUANTITY}" >> $GITHUB_OUTPUT

          # For PR builds, use PR number
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_TAG="pr-${{ github.event.number }}"
            echo "pr-tag=${PR_TAG}" >> $GITHUB_OUTPUT
            echo "Generated PR tag: ${PR_TAG}"
          else
            echo "pr-tag=${VERSION}" >> $GITHUB_OUTPUT
          fi

          echo "Generated version: ${VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        timeout-minutes: 3
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        timeout-minutes: 3
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image_env == 'IMAGE_NAME_MCP' && env.IMAGE_NAME_MCP || env.IMAGE_NAME_WEB }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ steps.version.outputs.version-tag }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=Overlay Companion MCP - ${{ matrix.name }}
            org.opencontainers.image.version=${{ steps.version.outputs.version-tag }}

      - name: Build and push Docker image
        timeout-minutes: 35
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          outputs: type=registry
          provenance: false

      - name: Create Git tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          TAG_NAME="${{ steps.version.outputs.version-tag }}"

          # Fetch all tags from remote to ensure we have the latest tag information
          git fetch --tags

          # Check if tag already exists locally or remotely
          if git tag -l | grep -q "^${TAG_NAME}$" || git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
            echo "Tag ${TAG_NAME} already exists (locally or remotely), skipping tag creation"
            exit 0
          fi

          # Create the tag
          git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"

          # Push the tag using the GitHub token
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin "${TAG_NAME}"

          echo "Successfully created and pushed tag: ${TAG_NAME}"

  cleanup-old-images:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        image: [mcp-server, web-interface]

    steps:
      - name: Delete old container versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.repository }}/${{ matrix.image }}
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: false
          token: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: needs.build-and-push.result == 'success'
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        image: [mcp-server, web-interface]

    steps:
      - name: Determine image tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            TAG="${{ needs.build-and-push.outputs.pr-tag }}"
          else
            TAG="${{ needs.build-and-push.outputs.version-tag }}"
          fi

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Image tag to scan: ${TAG}"

          # Verify tag is not empty
          if [ -z "${TAG}" ]; then
            echo "Error: Image tag is empty"
            exit 1
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ toLower(github.repository) }}/${{ matrix.image }}:${{ steps.tag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Check SARIF output
        id: sarif-check
        run: |
          if [ -f trivy-results.sarif ]; then echo "sarif_exists=true" >> $GITHUB_OUTPUT; else echo "sarif_exists=false" >> $GITHUB_OUTPUT; fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.sarif-check.outputs.sarif_exists == 'true'
        with:
          sarif_file: 'trivy-results.sarif'
