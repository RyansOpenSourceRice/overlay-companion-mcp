# Pre-commit configuration for Overlay Companion MCP
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files
#
# Auto-dependency installation: This configuration automatically installs
# missing dependencies (bandit, pbr, cspell, semgrep) when hooks run

repos:
  # Python formatting and linting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        files: \.py$

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        files: \.py$
        args: ["--profile", "black"]

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        files: \.py$
        args: ["--max-line-length=88", "--extend-ignore=E203,W503"]

  # Security scanning with auto-install
  - repo: local
    hooks:
      - id: bandit-with-install
        name: bandit
        entry: bash -c 'command -v bandit >/dev/null 2>&1 || { echo "Installing bandit..."; pip install bandit pbr; }; bandit -r flatpak/clipboard-bridge -f json --severity-level medium --confidence-level medium'
        language: system
        files: \.py$
        pass_filenames: false

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: \.md$
      - id: end-of-file-fixer
        exclude: \.md$
      - id: check-yaml
        files: \.(yaml|yml)$
      - id: check-json
        files: \.json$
      - id: check-toml
        files: \.toml$
      - id: check-xml
        files: \.xml$
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: detect-private-key

  # C# formatting (if dotnet-format is available)
  - repo: local
    hooks:
      - id: dotnet-format
        name: dotnet-format
        entry: bash -c 'command -v dotnet >/dev/null 2>&1 || { echo "dotnet not found, skipping"; exit 0; }; cd src && dotnet format --verbosity minimal'
        language: system
        files: \.(cs|csproj)$
        pass_filenames: false

      # AppImage and build validation
      - id: check-build-scripts-executable
        name: Check build scripts are executable
        entry: bash -c 'for script in scripts/*.sh; do [ -x "$script" ] || { echo "‚ùå $script is not executable. Run chmod +x $script"; exit 1; }; done'
        language: system
        files: ^scripts/.*\.sh$
        pass_filenames: false

      - id: validate-appimage-if-exists
        name: Validate AppImage if exists
        entry: bash -c 'if ls build/*.AppImage 1> /dev/null 2>&1; then echo "üîç Found AppImage, running validation..."; ./scripts/validate-appimage.sh build/*.AppImage; else echo "‚ÑπÔ∏è  No AppImage found, skipping validation"; fi'
        language: system
        pass_filenames: false
        always_run: true

      - id: check-workflow-syntax
        name: Check GitHub Actions workflow syntax
        entry: python3 -c "import yaml, sys; [yaml.safe_load(open(f)) for f in sys.argv[1:]]"
        language: system
        files: ^\.github/workflows/.*\.ya?ml$

      - id: check-npm-cache-config
        name: Check for npm cache configuration issues
        entry: bash -c 'if grep -r "cache.*npm" .github/workflows/ && ! find . -name "package*.json" -type f | grep -q .; then echo "‚ùå npm cache configured but no package.json found"; exit 1; fi'
        language: system
        files: ^\.github/workflows/.*\.ya?ml$
        pass_filenames: false

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        files: \.md$
        args: ["--fix"]

  # Spell checking with auto-install
  - repo: local
    hooks:
      - id: cspell-with-install
        name: cspell
        # Prefer repo-local cspell (infra/server/node_modules/.bin/cspell) for reproducibility.
        # Fallback to global install only if local binary not found.
        entry: bash -c 'if [ -x "./infra/server/node_modules/.bin/cspell" ]; then ./infra/server/node_modules/.bin/cspell --no-progress "$@"; else command -v cspell >/dev/null 2>&1 || { echo "Installing global cspell..."; npm install -g cspell; }; cspell --no-progress "$@"'
        language: system
        files: \.md$

  # JavaScript/Node.js security scanning (CodeQL-like functionality)
  - repo: local
    hooks:
      - id: eslint-security
        name: ESLint Security Analysis
        entry: bash -c 'cd infra/server && npm list eslint-plugin-security >/dev/null 2>&1 || npm install --no-save eslint@8 eslint-plugin-security; npx eslint --ext .js --config .eslintrc-security.json .'
        language: system
        files: \.js$
        pass_filenames: false

      - id: semgrep-security
        name: Semgrep Security Analysis (CodeQL Alternative)
        entry: bash -c 'command -v semgrep >/dev/null 2>&1 || { echo "Installing semgrep..."; pip install semgrep; }; semgrep --config=auto --quiet --exclude="*.min.js" --exclude="node_modules/" --include="*.js" --include="*.ts" --include="*.cs" . || echo "‚ö†Ô∏è  Semgrep found security issues - review recommended"'
        language: system
        files: \.(js|ts|cs)$
        pass_filenames: false

  # Security scanning
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        exclude: \.lock$|\.min\.js$|\.min\.css$

  # Git commit message linting
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [feat, fix, docs, style, refactor, test, chore, ci]
